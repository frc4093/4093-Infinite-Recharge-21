// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;

import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;

/**
 * Problem: Its currently inefficent but cant seem to fix no matter what I do
 * good enough for what we will do in autonomous though
 */
public class TurnToGyroAngle extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_angle;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private int count;
    private double offset =.9;
    private double extraSpeed;
    private double correctedDriveAngle;
    // private double error;
    private double diff;
    // private double kP =3;
    // private double gyro;
    private boolean grabAngleFromRobot;
    // private boolean initDone;
    public TurnToGyroAngle(double angle, double timeout) {
        m_angle = angle;
        
       setTimeout(timeout);
       grabAngleFromRobot = false;
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TurnToGyroAngle(double angle) {
        setTimeout(3); //if goes this long theres probably issue
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_angle = angle;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    grabAngleFromRobot = false;
    }
    public TurnToGyroAngle(){
        // m_angle = Robot.angle;
        grabAngleFromRobot =true;
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        count = 0;
        if (grabAngleFromRobot){
            m_angle = Robot.angle;
        }
        Robot.drive.setFakeAngle(Robot.drive.getAngle360());
        diff = Robot.drive.getFakeAngle()- m_angle;
        // if (diff>180){
        //     m_angle +=360; //I think this is what I was going for not sure why I had it so weird before.
        // }else if (diff<-180){
        //     m_angle -=360; 
        // }
        if (diff>95){
            m_angle += 180;
            Robot.distance = -Robot.distance;
        } else if (diff <-95){
            m_angle -= 180;
            Robot.distance = -Robot.distance;
        }
        
        
        Robot.dash.displayData("m_angle", m_angle);
        
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        // gyro = Robot.drive.getFakeAngle();
        
        correctedDriveAngle = Robot.drive.getFakeAngle();
        extraSpeed = (Math.abs(m_angle-correctedDriveAngle)/180)*.4;
        if (m_angle>correctedDriveAngle){
            Robot.drive.arcade(0, .145+extraSpeed,false);
        }else{
            Robot.drive.arcade(0, -.145-extraSpeed,false);
        }
        if (correctedDriveAngle > m_angle+offset || correctedDriveAngle < m_angle-offset){
            count = 0; //reset count
            
            
        }else{
            Robot.drive.arcade(0,0);
            count++;
        }
       
        // error = Robot.angle-gyro;
        
        // if (Math.abs(error)<offset){
        //     count++;
            
        // }else{
        //     count = 0;
        //     Robot.drive.tank(-.25,.25,false);
        // }
        
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        
        return count>5 || isTimedOut(); //this probably isnt the best way but easiest way I could think of to check if stable
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.drive.arcade(0, 0);
        System.out.println("DONE TURNING");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
