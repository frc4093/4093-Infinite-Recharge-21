// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;
import frc.robot.Robot;
import frc.robot.subsystems.*;
import frc.robot.commands.*;

/**
 *
 */
public class GoTo extends CommandGroup {
   private double currentX;
   private double currentY;
   private double kSpacing = 30/12; //ft
   private double distance;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public GoTo(double x, double y) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        currentX = Robot.currentX;
        currentY = Robot.currentY;
        double xOffsetFromRobot = (currentX-x)+.0001; //if we think of robot at (0,0) then where is x. .0001 is added to force triangle to exist
        double yOffsetFromRobot = (currentY-y)+.0001;//if we think of robot at (0,0) then where is y. 
        double hyp = Math.sqrt(Math.pow(xOffsetFromRobot*kSpacing,2)+Math.pow(yOffsetFromRobot*kSpacing,2));
        double angle = 0;
        int q = determineQuadrant(xOffsetFromRobot, yOffsetFromRobot);
        distance = hyp;
        //this is the distance we need to go
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
        System.out.printf("angle is: %d\n",angle);
        System.out.printf("distance is: %d\n",distance);

        addSequential(new TurnToGyroAngle(angle));
        addSequential(new driveForFeet(distance));
        Robot.currentX = x;
        Robot.currentY = y;
    } 
    // public double createDistance(double xLength, double yLength,double hyp) {
    //     double distance;
    //     if (yLength == 0){
    //         distance = xLength;
    //     } else if (xLength == 0){
    //         distance = yLength;
    //     }else{
    //         distance = hyp;
    //     }
    //     return distance;
    // }

    public double determineAngle(double xOffsetFromRobot,double yOffsetFromRobot, int q){
        double angle =0;
        switch (q) {
        case 1:
            angle = Math.atan(yOffsetFromRobot/xOffsetFromRobot);
        break;
        case 2:
            angle = 180 + Math.atan(yOffsetFromRobot/xOffsetFromRobot);
        break;
        case 3:
            angle = 180-Math.atan(yOffsetFromRobot/xOffsetFromRobot);
        break;
        case 4:
            angle = 360-Math.atan(yOffsetFromRobot/xOffsetFromRobot);
        break;
        
        }

        return angle;
    }
    public int determineQuadrant(double x, double y){
        int q;
        if (x>0 && y>0){
            q =1;
        }else if (x < 0 && y>0){
            q =2;
        }else if (x<0 && y<0){
            q = 3;
        }else{
            q =4;
        }
        return q;
    }
}
